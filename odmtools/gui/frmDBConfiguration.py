"""Subclass of clsDBConfiguration, which is generated by wxFormBuilder."""

import logging

import wx
from sqlalchemy.exc import DBAPIError

import odmtools.view.clsDBConfig as clsDBConfig
from odmtools.common.logger import LoggerTool

'''
this_file = os.path.realpath(__file__)
directory = os.path.dirname(os.path.dirname(this_file))
sys.path.append(directory)
'''

tool = LoggerTool()
logger = tool.setupLogger(__name__, __name__ + '.log', 'w', logging.DEBUG)

class frmDBConfig(wx.Dialog):
    def __init__(self, parent, service_manager, is_main=False):
        wx.Dialog.__init__(self, parent, title=u'Database Configuration', style=wx.DEFAULT_DIALOG_STYLE, size=wx.Size(500, 300))
        self.panel = pnlDBConfig(self, service_manager, is_main)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.AddWindow(self.panel, 1, border=1, flag=wx.EXPAND | wx.GROW | wx.ALL)
        self.SetSizer(self.sizer)
        self.sizer.Fit(self.panel)

# Implementing clsDBConfiguration
class pnlDBConfig(clsDBConfig.clsDBConfiguration):
    def __init__(self, parent, service_manager, is_main=False):
        clsDBConfig.clsDBConfiguration.__init__(self, parent)

        self.choices = {"Microsoft SQL Server": 'mssql', "MySQL": 'mysql'}
        self.cbDatabaseType.AppendItems(self.choices.keys())

        self.parent = parent
        self.is_main = is_main
        self.service_manager = service_manager

        self.set_field_values()



    # Handlers for clsDBConfiguration events.
    def OnBtnTest(self, event):
        conn_dict = self._GetFieldValues()
        self.validateInput(conn_dict)

    def OnBtnSave(self, event):
        conn_dict = self._GetFieldValues()
        result = self.validateInput(conn_dict, False)

        # if result:
        # self.SetReturnCode(wx.ID_OK)
        #    self.service_manager.add_connection(conn_dict)
        #    self.Destroy()

    def OnBtnCancel(self, event):
        self.parent.SetReturnCode(wx.ID_CANCEL)
        self.parent.Destroy()

    def validateInput(self, conn_dict, test=True):
        message = ""

        ## FIXME TODO Fix this crap
        if conn_dict['user'] and conn_dict['password'] and conn_dict['address'] and conn_dict['db'] and conn_dict[
            'engine']:
            if test:
                if self.service_manager.test_connection(conn_dict):
                    try:
                        if self.service_manager.get_db_version(conn_dict) == u'1.1.1':
                            message = "This connection is valid"
                            wx.MessageBox(message, 'Test Connection', wx.OK)
                            return True
                    except DBAPIError:
                        message = "Please check the credentials and " \
                                  "ensure that the database is accessible"
                        wx.MessageBox(message, 'Login Unsuccessful', wx.OK | wx.ICON_ERROR)
                else:
                    message = "This connection is invalid"
                    wx.MessageBox(message, 'Test Connection', wx.OK | wx.ICON_ERROR)
            else:
                self.parent.SetReturnCode(wx.ID_OK)
                self.service_manager.add_connection(conn_dict)
                self.parent.Destroy()
        else:
            message = "Please enter valid connection information"
            wx.MessageBox(message, 'ODMTool Python', wx.OK | wx.ICON_EXCLAMATION)
        return False


    # Returns a dictionary of the database values entered in the form
    def _GetFieldValues(self):
        conn_dict = {}

        conn_dict['engine'] = self.choices[self.cbDatabaseType.GetValue()]
        conn_dict['user'] = self.txtUser.GetValue()
        conn_dict['password'] = self.txtPass.GetValue()
        conn_dict['address'] = self.txtServer.GetValue()
        conn_dict['db'] = self.txtDBName.GetValue()

        return conn_dict

    def set_field_values(self):
        conn = self.service_manager.is_valid_connection()
        if conn is not None:
            self.txtServer.SetValue(conn['address'])
            self.txtDBName.SetValue(conn['db'])
            self.txtUser.SetValue(conn['user'])

            for k, v in self.choices.iteritems():
                if v == conn['engine']:
                    self.cbDatabaseType.SetValue(k)
