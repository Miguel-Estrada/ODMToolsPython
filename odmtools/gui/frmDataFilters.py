"""Subclass of frmDataFilters, which is generated by wxFormBuilder."""

from datetime import datetime

import wx
from wx.lib.pubsub import pub as Publisher


# # Enable logging
import logging
from odmtools.common.logger import LoggerTool
from odmtools.view import clsDataFilters

tool = LoggerTool()
logger = tool.setupLogger(__name__, __name__ + '.log', 'w', logging.DEBUG)
# #




# Implementing frmDataFilters
class frmDataFilter(clsDataFilters.clsDataFilters):
    def __init__(self, parent, series):
        self.is_applied = False
        self.recordService = series
        clsDataFilters.clsDataFilters.__init__(self, parent)

        self.setDates()


    def onCheckbox(self, event):
        self.recordService.toggle_filter_previous()


    def onSetFocus(self, event):
        logger.debug("event ed : %s" % repr(event.Id))

        # DateRange
        if event.Id in (self.dpAfter.Id, self.dpBefore.Id, self.tpBefore.Id, self.tpAfter.Id):
            self.rbDate.SetValue(True)
        #Data Gaps
        elif event.Id in ( self.txtGapsVal.Id, self.cbGapTime.Id):
            self.rbDataGaps.SetValue(True)
        #Value Threshold
        elif event.Id in (self.txtThreshValLT.Id, self.txtThreshValGT.Id ):
            self.rbThreshold.SetValue(True)
        #value change threshold
        elif event.Id in(self.txtVChangeLT.Id, self.txtVChangeGT.Id) :
            self.rbVChangeThresh.SetValue(True)

        event.Skip()


    def onBtnClearButton(self, event):
        self.setDates()
        self.txtThreshValGT.Clear()
        self.txtThreshValLT.Clear()
        self.txtGapsVal.Clear()
        self.cbGapTime.SetStringSelection("second")
        self.txtVChangeThresh.Clear()
        self.recordService.reset_filter()

        Publisher.sendMessage(("changePlotSelection"), sellist=self.recordService.get_filter_list())
        event.Skip()


    def onBtnOKButton(self, event):

        self.recordService.toggle_filter_previous(self.chkToggleFilterSelection.Value)

        if not self.is_applied:
            self.onBtnApplyButton(event)
        event.Skip()
        self.Close()


    def onBtnCancelButton(self, event):
        event.Skip()
        self.Close()


    def onBtnApplyButton(self, event):
        self.is_applied = True
        if self.rbThreshold.GetValue():
            if self.txtThreshValGT.GetValue():
                self.recordService.filter_value(float(self.txtThreshValGT.GetValue()), '>')
            if self.txtThreshValLT.GetValue():
                self.recordService.filter_value(float(self.txtThreshValLT.GetValue()), '<')

        elif self.rbDataGaps.GetValue():
            if self.txtGapsVal.GetValue():
                self.recordService.data_gaps(float(self.txtGapsVal.GetValue()), self.cbGapTime.GetValue())

        elif self.rbDate.GetValue():
            dateAfter = self.dpAfter.GetValue()
            timeAfter = self.tpAfter.GetValue(as_wxDateTime=True)
            dateBefore = self.dpBefore.GetValue()
            timeBefore = self.tpBefore.GetValue(as_wxDateTime=True)

            #print type(timeBefore)
            #print dir(timeBefore)
            dtDateAfter = datetime(int(dateAfter.Year), int(dateAfter.Month)+1, int(dateAfter.Day), int(timeAfter.Hour), int(timeAfter.Minute), timeAfter.Second)
            dtDateBefore = datetime(int(dateBefore.Year), int(dateBefore.Month)+1, int(dateBefore.Day), int(timeBefore.Hour), int(timeBefore.Minute), int(timeBefore.Second))
            self.recordService.filter_date(dtDateBefore, dtDateAfter)

        elif self.rbVChangeThresh.GetValue():
           if self.txtVChangeGT.GetValue():
                self.recordService.value_change_threshold(float(self.txtVChangeGT.GetValue()), '>')
           elif self.txtVChangeLT.GetValue():
                self.recordService.value_change_threshold(float(self.txtVChangeLT.GetValue()), '<')
                #self.recordService.value_change_threshold(float(self.txtVChangeThresh.GetValue()))

        #Publisher.sendMessage("changeSelection", sellist=self.recordService.get_filter_list(), datetime_list=[])
        #Publisher.sendMessage("changeTableSelection", sellist=self.recordService.get_filter_list(), datetime_list=[])
        event.Skip()


    def setDates(self):
        dateAfter = self.recordService.get_series_points()[0][2]
        dateBefore = self.recordService.get_series_points()[-1][2]

        # logger.debug("dateAfter: ", repr(dateAfter.day), " + ", repr(dateAfter.month), " + ", repr(dateAfter.year))
        # logger.debug("dateBefore: ", repr(dateBefore.day), " + ", repr(dateBefore.month), " + ", repr(dateBefore.year))

        formattedDateAfter = wx.DateTimeFromDMY(int(dateAfter.day), int(dateAfter.month)-1, int(dateAfter.year), 0, 0, 0)

        formattedDateBefore = wx.DateTimeFromDMY(int(dateBefore.day) + 1, int(dateBefore.month)-1, int(dateBefore.year), 0, 0,
                                                 0)
        self.dpAfter.SetRange(formattedDateAfter, formattedDateBefore)
        self.dpBefore.SetRange(formattedDateAfter, formattedDateBefore)
        self.dpAfter.SetValue(formattedDateAfter)
        self.dpBefore.SetValue(formattedDateBefore)
