# -*- coding: utf-8 -*- ############################################################################# Python code generated with wxFormBuilder (version Sep 12 2010)## http://www.wxformbuilder.org/#### PLEASE DO "NOT" EDIT THIS FILE!###########################################################################import wximport stringALPHA_ONLY = 1DIGIT_ONLY = 2class MyValidator(wx.PyValidator):    def __init__(self, flag=None, pyVar=None):        wx.PyValidator.__init__(self)        self.flag = flag        self.Bind(wx.EVT_CHAR, self.OnChar)    def Clone(self):        return MyValidator(self.flag)    def Validate(self, win):        tc = self.GetWindow()        val = tc.GetValue()        for x in val:            if x not in string.digits:                return False        return True    def OnChar(self, event):        key = event.GetKeyCode()        if key < wx.WXK_SPACE or key == wx.WXK_DELETE or key > 255:            event.Skip()            return        if self.flag == ALPHA_ONLY and chr(key) in string.letters:            event.Skip()            return        if self.flag == DIGIT_ONLY and chr(key) in string.digits + '.':            event.Skip()            return        if not wx.Validator_IsSilent():            wx.Bell()        # Returning without calling even.Skip eats the event before it        # gets to the text control        return    def TransferToWindow(self):        """ Transfer data from validator to window.            The default implementation returns False, indicating that an error            occurred.  We simply return True, as we don't do any data transfer.        """        return True # Prevent wxDialog from complaining.    def TransferFromWindow(self):        """ Transfer data from window to validator.            The default implementation returns False, indicating that an error            occurred.  We simply return True, as we don't do any data transfer.        """        return True # Prevent wxDialog from complaining.############################################################################# Class dlg_equation###########################################################################class dlg_equation ( wx.Dialog ):		def __init__( self, parent ):		wx.Dialog.__init__ ( self, parent, id = wx.ID_ANY, title = u"Transform Using Algebraic Equation", pos = wx.DefaultPosition, size = wx.Size( 675,110 ), style = wx.DEFAULT_DIALOG_STYLE )				self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )				bSizer3 = wx.BoxSizer( wx.VERTICAL )				fgSizer5 = wx.FlexGridSizer( 2, 13, 0, 0 )		fgSizer5.SetFlexibleDirection( wx.BOTH )		fgSizer5.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_staticText11 = wx.StaticText( self, wx.ID_ANY, u"Y =", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText11.Wrap( -1 )		fgSizer5.Add( self.m_staticText11, 0, wx.ALL, 5 )				self.m_textCtrl7 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY))		fgSizer5.Add( self.m_textCtrl7, 0, wx.ALL, 5 )				self.m_staticText12 = wx.StaticText( self, wx.ID_ANY, u"+", wx.DefaultPosition, wx.DefaultSize, 0)		self.m_staticText12.Wrap( -1 )		fgSizer5.Add( self.m_staticText12, 0, wx.ALL, 5 )				self.m_textCtrl8 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY))		fgSizer5.Add( self.m_textCtrl8, 0, wx.ALL, 5 )				self.m_staticText13 = wx.StaticText( self, wx.ID_ANY, u"x +", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText13.Wrap( -1 )		fgSizer5.Add( self.m_staticText13, 0, wx.ALL, 5 )				self.m_textCtrl9 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY))		fgSizer5.Add( self.m_textCtrl9, 0, wx.ALL, 5 )				self.m_staticText14 = wx.StaticText( self, wx.ID_ANY, u"x\u00B2 +", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText14.Wrap( -1 )		fgSizer5.Add( self.m_staticText14, 0, wx.ALL, 5 )				self.m_textCtrl10 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY))		fgSizer5.Add( self.m_textCtrl10, 0, wx.ALL, 5 )				self.m_staticText15 = wx.StaticText( self, wx.ID_ANY, u"x\u00B3 +", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText15.Wrap( -1 )		fgSizer5.Add( self.m_staticText15, 0, wx.ALL, 5 )				self.m_textCtrl11 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY))		fgSizer5.Add( self.m_textCtrl11, 0, wx.ALL, 5 )				self.m_staticText16 = wx.StaticText( self, wx.ID_ANY, u"x\u2074 +", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText16.Wrap( -1 )		fgSizer5.Add( self.m_staticText16, 0, wx.ALL, 5 )				self.m_textCtrl12 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY))		fgSizer5.Add( self.m_textCtrl12, 0, wx.ALL, 5 )				self.m_staticText17 = wx.StaticText( self, wx.ID_ANY, u"x\u2075", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText17.Wrap( -1 )		fgSizer5.Add( self.m_staticText17, 0, wx.ALL, 5 )				bSizer3.Add( fgSizer5, 1, wx.ALL, 5 )				fgSizer6 = wx.FlexGridSizer( 2, 2, 0, 0 )		fgSizer6.SetFlexibleDirection( wx.BOTH )		fgSizer6.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_button3 = wx.Button( self, wx.ID_ANY, u"OK", wx.DefaultPosition, wx.DefaultSize, 0 )		self.Bind(wx.EVT_BUTTON, self.onOK, self.m_button3)		fgSizer6.Add( self.m_button3, 0, wx.ALL, 5 )				self.m_button4 = wx.Button( self, wx.ID_ANY, u"Cancel", wx.DefaultPosition, wx.DefaultSize, 0 )		self.Bind(wx.EVT_BUTTON, self.onCancel, self.m_button4)		fgSizer6.Add( self.m_button4, 0, wx.ALL, 5 )				bSizer3.Add( fgSizer6, 1, wx.ALL, 5 )				self.SetSizer( bSizer3 )		self.Layout()				self.Centre( wx.BOTH )	# Virtual event handlers - Override them in derived class	def onOK(self, event):		event.Skip()	def onCancel(self, event):		event.Skip()	def __del__( self ):		pass	