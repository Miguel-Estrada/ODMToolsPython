"""Subclass of AddPoints, which is generated by wxFormBuilder."""

import wx
from odmtools.controller.frmBulkInsert import BulkInsert
import odmtools.view.clsAddPoints as clsAddPoints



# Implementing AddPoints
class AddPoints(clsAddPoints.AddPoints):
    def __init__(self, parent, **kwargs):
        clsAddPoints.AddPoints.__init__(self, parent, **kwargs)
        self.frame = BulkInsert(self)

        #self.cvService = serviceManager.get_cv_service()
        #self.recordService = recordService

        self.Show()


    # Handlers for AddPoints events.
    def onAddBtn(self, event):
        """

        :param event:
        :return:
        """
        self.olv.AddObject(self.olv.sampleRow())
        self.sb.SetStatusText("Added a row")
        event.Skip()

    def onClearAllBtn(self, event):
        """

        :param event:
        :return:
        """
        if len(self.olv.GetObjects()) < 1:
            wx.MessageBox("Nothing to remove here", " ", wx.OK)
            return
        msg = wx.MessageDialog(None, 'Are you sure you want to delete your work?', 'Clear Everything?', wx.YES_NO | wx.ICON_WARNING |wx.NO_DEFAULT )
        value = msg.ShowModal()
        if value == wx.ID_YES:
            self.olv.SetObjects(None)
        return

    def onDeleteBtn(self, event):
        """

        :param event:
        :return:
        """
        try:
            if self.selectedObject:
                if len(self.selectedObject) > 1:
                    length = len(self.selectedObject)
                    msg = wx.MessageDialog(None, 'Are you sure you want to delete %d items' % length,
                                           'Clear items?',
                                           wx.YES_NO | wx.ICON_WARNING | wx.NO_DEFAULT)
                    value = msg.ShowModal()
                    if value == wx.ID_YES:
                        self.olv.RemoveObjects(self.selectedObject)
                        self.sb.SetStatusText("Removed %s items" % length)

                else:
                    print "This is called!"
                    self.olv.RemoveObject(self.selectedObject)
                    self.sb.SetStatusText("Removing %s" % self.selectedObject.dataValue)
        except TypeError as e:

            msg = wx.MessageDialog(None, 'Are you sure you want to delete your work?', 'Clear items?',
                                   wx.YES_NO | wx.ICON_WARNING | wx.NO_DEFAULT)
            value = msg.ShowModal()
            if value == wx.ID_YES:
                self.olv.RemoveObject(self.selectedObject)
                self.sb.SetStatusText("Removing %s" % self.sb.SetStatusText("Removing %s" % self.selectedObject.dataValue))

        self.selectedObject = None
        event.Skip()

    def onUploadBtn(self, event):
        """

        :param event:
        :return:
        """
        if not self.frame.IsShown():
            self.frame.CenterOnParent()
            self.frame.Show()
        else:
            self.frame.Hide()

        event.Skip()
    def onFinishedBtn(self, event):
        """

        :param event:
        :return:
        """
        self.Close()
        event.Skip()

    def onSelected(self, event):
        object = event.GetEventObject().GetSelectedObjects()

        #event.GetEventObject().SetToolTipString("test")
        try:
            if len(object) > 1:
                self.selectedObject = object
            else:
                self.selectedObject = object[0]
        except TypeError as e:
            print e
            pass


class Example(wx.Frame):
    def __init__(self, parent, *args, **kwargs):
        wx.Frame.__init__(self, parent, *args, **kwargs)
        m = AddPoints(parent)


if __name__ == '__main__':
    app = wx.App(useBestVisual=True)
    ex = Example(None)
    app.MainLoop()